{"version":3,"sources":["index.js"],"names":["quotes","Text","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","id","this","props","text","React","Component","Separator","Author","author","Buttons","encodeURIComponent","tweetUrl","getTweetURL","tumblrUrl","getTumblrUrl","btnStyle","background","btnBackground","href","target","style","className","onClick","randomQuote","QuoteBox","_this","Object","C_Users_Alex_Desktop_Projects_Code_my_frontend_snippets_p02_random_quote_machine_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","C_Users_Alex_Desktop_Projects_Code_my_frontend_snippets_p02_random_quote_machine_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","C_Users_Alex_Desktop_Projects_Code_my_frontend_snippets_p02_random_quote_machine_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","state","updateQuote","bind","C_Users_Alex_Desktop_Projects_Code_my_frontend_snippets_p02_random_quote_machine_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0__","randomizeColors","getRandomQuotes","console","log","setState","Math","floor","random","length","_this2","quote","getRandomQuote","fetch","then","response","json","catch","error","hue","document","body","backgroundColor","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.3a49a25d.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\n\r\nfunction getRandomHue() {\r\n    return Math.floor(Math.random() * 360);\r\n}\r\n\r\nvar quotes;\r\n\r\nclass Text extends React.Component {\r\n    render() {\r\n        return (\r\n            <p id='text'>\r\n                {this.props.text}\r\n            </p>\r\n        );\r\n    }\r\n}\r\n\r\nclass Separator extends React.Component {\r\n    render() {\r\n        return (\r\n            <div id='separator-container'>\r\n                <div id='separator'></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Author extends React.Component {\r\n    render() {\r\n        return (\r\n            <p id='author'>\r\n                {this.props.author}\r\n            </p>\r\n        );\r\n    }\r\n}\r\n\r\nclass Buttons extends React.Component {\r\n\r\n    getTweetURL(text,author) {\r\n        var url;\r\n        if (text !== '') {\r\n            url = 'https://twitter.com/intent/tweet?text=\"' + \r\n                encodeURIComponent(text) + '\" ' + encodeURIComponent(author + ' #quotes');\r\n        } else {\r\n            url = '#';\r\n        }\r\n        return url;\r\n    }\r\n\r\n    getTumblrUrl(text,author) {\r\n        var url;\r\n        if (text !== '') {\r\n            url = 'https://www.tumblr.com/widgets/share/tool?posttype=quote&tags=quotes&caption='+ \r\n                encodeURIComponent(author)+'&content=' + encodeURIComponent(text) + \r\n                '&canonicalUrl=https%3A%2F%2Fwww.tumblr.com%2Fbuttons&shareSource=tumblr_share_button';\r\n        } else {\r\n            url = '#';\r\n        }\r\n        return url;\r\n    }\r\n    render() {\r\n        var tweetUrl = this.getTweetURL(this.props.text, this.props.author);\r\n        var tumblrUrl = this.getTumblrUrl(this.props.text, this.props.author);\r\n        var btnStyle = {\r\n            background: this.props.btnBackground,\r\n        };\r\n        return(\r\n            <div id='buttons'>\r\n                <a id=\"tweet-quote\" href={tweetUrl} target='_blank' style={btnStyle}>\r\n                    <i className=\"fab fa-twitter\"></i>\r\n                </a>\r\n                <a id=\"tumblr-quote\" href={tumblrUrl} target='_blank' style={btnStyle}>\r\n                    <i className=\"fab fa-tumblr\"></i>\r\n                </a>\r\n                <div id=\"buttons-free-space\">\r\n                </div>\r\n                <button id=\"new-quote\" onClick={this.props.randomQuote} style={btnStyle}>\r\n                    New quote\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass QuoteBox extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            text: '',\r\n            author: '',\r\n            btnBackground: 'white'\r\n        }\r\n        this.updateQuote = this.updateQuote.bind(this);\r\n        this.randomizeColors = this.randomizeColors.bind(this);\r\n        this.getRandomQuotes = this.getRandomQuotes.bind(this);\r\n    }\r\n    updateQuote(text,author) {\r\n        console.log('quote-box updateQuote');\r\n        this.setState({\r\n            text: text,\r\n            author: author,\r\n        });\r\n    }\r\n  \r\n    getRandomQuote() {\r\n      return quotes[Math.floor(Math.random()*quotes.length)];\r\n    }\r\n    getRandomQuotes() {\r\n      this.randomizeColors();\r\n      if (typeof quotes !== 'undefined') {\r\n        var quote = this.getRandomQuote();\r\n        this.updateQuote(quote.author, quote.quote);\r\n      } else {\r\n        fetch('https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json')\r\n            .then((response) => response.json())\r\n            .then((json) => {\r\n              quotes = json.quotes;\r\n              var quote = this.getRandomQuote();\r\n              console.log('Quotes: ', quote.author);\r\n              this.updateQuote(quote.author, quote.quote);\r\n            })\r\n            .catch((error) => {\r\n              console.error(error);\r\n            })\r\n      }\r\n    }\r\n    componentDidMount() {\r\n        console.log('quote-box componentDidMount');        \r\n        this.getRandomQuotes();\r\n      \r\n    }\r\n    \r\n    randomizeColors() {\r\n        console.log('quote-box randomizeColors');\r\n        var hue = getRandomHue();\r\n        document.body.style.backgroundColor = 'hsl(' + hue + ', 100%, 97.5%)';\r\n        // consider opacity\r\n        var btnBackground = 'hsl(' + hue + ', 100%, 40%)';\r\n        this.setState({\r\n            btnBackground: btnBackground\r\n        });\r\n    }\r\n    render() {\r\n        console.log('quote-box render');\r\n        return (\r\n            <div id='quote-box'>\r\n                <Text text={this.state.text}/>\r\n                <Separator/>\r\n                <Author author={this.state.author}/>\r\n                <Buttons text={this.state.text} author={this.state.author}\r\n                    randomQuote={this.getRandomQuotes} btnBackground={this.state.btnBackground}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nReactDOM.render(<QuoteBox />, document.getElementById('root'));"],"sourceRoot":""}